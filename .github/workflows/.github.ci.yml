name: CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache Poetry dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip --no-cache-dir
          pip install poetry
          poetry config virtualenvs.create false
          poetry install --no-root

      - name: Lint with Black
        run: poetry run black app

      - name: Lint with Ruff
        run: poetry run ruff check app

  unit-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache Poetry dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip --no-cache-dir
          pip install poetry
          poetry config virtualenvs.create false
          poetry install --no-root

      - name: Start docker compose services
        run: docker compose up -d

      - name: Wait for services to be ready
        run: sleep 15

      - name: Run unit tests
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: connect
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
        run: poetry run pytest tests/unit

  deploy:
    if: ${{ true }}
    needs: [lint, unit-test]
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/connect:latest
          build-args: |
            ENVIRONMENT=production

      - name: Download and start ngrok
        run: |
          curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null
          echo "deb https://ngrok-agent.s3.amazonaws.com buster main" | sudo tee /etc/apt/sources.list.d/ngrok.list
          sudo apt update && sudo apt install ngrok
          ngrok config add-authtoken ${{ secrets.NGROK_SECRET_KEY }}
          ngrok http 8000 --log=stdout > ngrok.log 2>&1 &
          sleep 5
          if ! pgrep ngrok > /dev/null; then
            echo "Failed to start ngrok"
            cat ngrok.log
            exit 1
          fi
          curl -s http://127.0.0.1:4040/api/tunnels > tunnels.json
          if [ ! -s tunnels.json ]; then
            echo "Failed to get ngrok tunnels"
            cat ngrok.log
            exit 1
          fi
          

      - name: Show public URL
        run: |
          cat tunnels.json
          PUBLIC_URL=$(jq -r '.tunnels[0].public_url' tunnels.json)
          if [ -z "$PUBLIC_URL" ]; then
            echo "Failed to get public URL"
            exit 1
          fi
          echo "Public URL: $PUBLIC_URL"
          send_message:
            name: Send success message
            runs-on: ubuntu-latest
            needs: build_and_push_to_docker_hub
            steps:
            - name: send message
              uses: appleboy/telegram-action@master
              with:
                to: ${{ secrets.TELEGRAM_TO }}
                token: ${{ secrets.TELEGRAM_TOKEN }}
                message: Ура !  ${{ github.workflow }} для репозитория ${{ github.repository }} успешно выполнен!