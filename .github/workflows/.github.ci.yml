name: CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache Poetry dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip --no-cache-dir
          pip install poetry
          poetry config virtualenvs.create false
          poetry install --no-root

      - name: Lint with Black
        run: poetry run black app

      - name: Lint with Ruff
        run: poetry run ruff check app

  unit-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache Poetry dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip --no-cache-dir
          pip install poetry
          poetry config virtualenvs.create false
          poetry install --no-root

      - name: Start docker compose services
        run: docker compose up -d

      - name: Wait for services to be ready
        run: sleep 15

      - name: Run unit tests
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: connect
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
        run: poetry run pytest tests/unit

  deploy:
    if: ${{ true }} 
    needs: [lint, unit-test]
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download and start ngrok
        run: |
          curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null
          echo "deb https://ngrok-agent.s3.amazonaws.com buster main" | sudo tee /etc/apt/sources.list.d/ngrok.list
          sudo apt update && sudo apt install ngrok
          ngrok config add-authtoken ${{ secrets.NGROK_SECRET_KEY }}
          ngrok http 8000 --log=stdout > ngrok.log 2>&1 &
          sleep 5
          if ! pgrep ngrok > /dev/null; then
            echo "Failed to start ngrok"
            cat ngrok.log
            exit 1
          fi
          curl -s http://127.0.0.1:4040/api/tunnels > tunnels.json
          if [ ! -s tunnels.json ]; then
            echo "Failed to get ngrok tunnels"
            cat ngrok.log
            exit 1
          fi

      - name: Show public URL
        run: |
          cat tunnels.json
          PUBLIC_URL=$(jq -r '.tunnels[0].public_url' tunnels.json)
          if [ -z "$PUBLIC_URL" ]; then
            echo "Failed to get public URL"
            exit 1
          fi
          echo "Public URL: $PUBLIC_URL"

  deploy-docs:
    needs: [lint, unit-test]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip --no-cache-dir
          pip install poetry
          poetry config virtualenvs.create false
          poetry install --no-root

      - name: Start docker compose services
        run: docker compose up -d

      - name: Wait for services to be ready
        run: sleep 15

      - name: Start FastAPI app to generate docs
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: connect
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
        run: |
          poetry run uvicorn app.main:app --host 0.0.0.0 --port 8080 &
          sleep 20
          
          # Check if the application is running
          echo "Checking if FastAPI is running..."
          curl -f http://localhost:8080/docs || (echo "FastAPI is not running" && exit 1)
          echo "FastAPI is running successfully"

      - name: Download API docs as static files
        run: |
          sudo apt-get update
          sudo apt-get install -y wget
          # Download Swagger UI
          wget -O index.html http://localhost:8080/docs
          # Download ReDoc
          wget -O redoc.html http://localhost:8080/redoc
          # Download OpenAPI schema
          wget -O openapi.json http://localhost:8080/openapi.json
          # Create a simple index page
          echo '<!DOCTYPE html>
          <html>
          <head>
              <title>Connect API Documentation</title>
              <meta http-equiv="refresh" content="0; url=index.html" />
          </head>
          <body>
              <p>Redirecting to <a href="index.html">API documentation</a>...</p>
          </body>
          </html>' > 404.html
          
          # Debug information
          echo "Listing contents of directory:"
          ls -la
          echo "Contents of index.html:"
          head -n 5 index.html

      - name: Setup Pages
        uses: actions/configure-pages@v4
        with:
          static_site_generator: none

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4